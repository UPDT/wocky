defmodule Wocky.Account do
  @moduledoc """
  The Account context. Represents the backend bookkeeping required for users
  in the system (authentication, registration, deletion, etc).
  """

  use Elixometer

  alias Wocky.Account.ClientVersion
  alias Wocky.Account.JWT.Client, as: ClientJWT
  alias Wocky.Account.JWT.Firebase
  alias Wocky.Account.JWT.Server, as: ServerJWT
  alias Wocky.Account.Register
  alias Wocky.User

  require Logger

  @type token :: Token.token()

  # ====================================================================
  # User registration

  @doc """
  Creates a new user with a password.
  Used for testing only.
  """
  @spec register(User.id(), binary, binary) :: {:ok, User.t()} | {:error, any}
  def register(id, password, pass_details) do
    Register.create(%{
      id: id,
      password: password,
      pass_details: pass_details
    })
  end

  # ====================================================================
  # JWT generation

  @spec get_location_jwt(User.t()) :: {:ok, binary} | {:error, any}
  def get_location_jwt(%User{} = user) do
    with {:ok, token, _claims} <- ServerJWT.encode_and_sign(user) do
      {:ok, token}
    end
  end

  # ====================================================================
  # Authentication

  @type provider ::
          :token | :bypass | :firebase | :client_jwt | :server_jwt | :jwt

  @doc """
  Authenticates the user using the specified provider and credentials.

  Credentials may be either a binary representing a token or a 2-tuple
  containing an ID and token/password. The provider interprets the credentials,
  so the credential format depends on the provider being used.

  Most providers will create a new account if one does not already exist.

  The following providers are supported:

  ### :bypass

  Bypass authentication only works when it is enabled on the server. This would
  only be for test instances. When it is enabled, authentication always
  succeeds if the phone number begins with the prefix "+1555".

  The credentials for Bypass authentication are the external ID and phone
  number of the user.

  ### :firebase

  Authenticates the user with an access token acquired from Google Firebase.

  The credentials are the access token.

  ### :client_jwt

  This provider wraps another provider and allows for authentication of the
  client and inclusion of metadata. Currently supported wrapped providers
  are Firebase and Bypass. The credentials are a JWT token that was generated
  by the client using the server secret.

  See the Wiki for details:
  https://github.com/hippware/tr-wiki/wiki/Authentication-proposal

  ### :server_jwt

  This provider authenticates using a JWT generated by the server. These tokens
  are only usable for authenticating against the HTTP location upload API.
  """
  @spec authenticate(provider, binary | {binary, binary}) ::
          {:ok, {User.t(), boolean}} | {:error, binary}
  def authenticate(:bypass, {external_id, phone_number}) do
    authenticate_with(:bypass, {external_id, phone_number}, %{})
  end

  def authenticate(:firebase, token) do
    authenticate_with(:firebase, token, %{})
  end

  def authenticate(:client_jwt, token) do
    case ClientJWT.decode_and_verify(token) do
      {:ok, %{"typ" => "firebase", "sub" => new_token} = claims} ->
        update_counter("auth.client_jwt.firebase.success", 1)
        authenticate_with(:firebase, new_token, claims)

      {:ok, %{"typ" => "bypass", "sub" => id, "phone_number" => phone} = claims} ->
        update_counter("auth.client_jwt.bypass.success", 1)
        authenticate_with(:bypass, {id, phone}, claims)

      {:ok, _claims} ->
        update_counter("auth.client_jwt.fail", 1)
        {:error, "Unable to authenticate wrapped entity"}

      {:error, reason} ->
        update_counter("auth.client_jwt.fail", 1)
        {:error, error_to_string(reason)}
    end
  end

  def authenticate(:server_jwt, token) do
    case ServerJWT.resource_from_token(token) do
      {:ok, user, _claims} ->
        update_counter("auth.server_jwt.success", 1)
        {:ok, {user, false}}

      {:error, reason} ->
        update_counter("auth.server_jwt.fail", 1)
        {:error, error_to_string(reason)}
    end
  end

  def authenticate(:jwt, token) do
    provider =
      case JOSE.JWT.peek_payload(token).fields do
        %{"typ" => "location"} -> :server_jwt
        %{"typ" => "firebase"} -> :client_jwt
        %{"typ" => "bypass"} -> :client_jwt
        _else -> :unknown
      end

    authenticate(provider, token)
  rescue
    ArgumentError -> {:error, :bad_token}
  end

  def authenticate(provider, _creds) do
    update_counter("auth.unknown.fail", 1)
    provider_error(provider)
  end

  defp authenticate_with(:bypass, {external_id, phone_number}, opts) do
    if has_bypass_prefix(phone_number) do
      find_or_create(:bypass, external_id, phone_number, opts)
    else
      provider_error(:bypass)
    end
  end

  defp authenticate_with(:firebase, token, opts) do
    case Firebase.decode_and_verify(token) do
      {:ok, %{"sub" => external_id, "phone_number" => phone_number}} ->
        update_counter("auth.firebase.success", 1)
        find_or_create(:firebase, external_id, phone_number, opts)

      {:error, reason} ->
        update_counter("auth.firebase.fail", 1)
        {:error, error_to_string(reason)}
    end
  end

  defp find_or_create(method, id, phone, opts) do
    with {:ok, {user, new?}} = Register.find_or_create(method, id, phone) do
      maybe_record_client_version(user, opts)
      {:ok, {user, new?}}
    end
  end

  defp maybe_record_client_version(user, %{"dvc" => device, "iss" => agent}),
    do: ClientVersion.record(user, device, agent)

  defp maybe_record_client_version(_, _), do: :ok

  defp has_bypass_prefix(phone_number) do
    if Application.get_env(:wocky, :enable_auth_bypass) do
      prefixes = Application.get_env(:wocky, :auth_bypass_prefixes)
      String.starts_with?(phone_number, prefixes)
    end
  end

  defp provider_error(p), do: {:error, "Unsupported provider: #{p}"}

  defp error_to_string(%{message: reason}), do: reason
  defp error_to_string(reason) when is_binary(reason), do: reason
  defp error_to_string(reason) when is_atom(reason), do: to_string(reason)
  defp error_to_string(reason), do: inspect(reason)

  # ====================================================================
  # Account disabling

  @doc """
  Disable a user prior to their eventual deletion so that they cannot
  re-login before the deletion is finalised
  """
  @spec disable_user(User.id()) :: :ok
  def disable_user(user_id) do
    User.remove_auth_details(user_id)
  end
end

defmodule Wocky.Repo.QueryUtils do
  @moduledoc """
  Handy functions for erlang to use when interacting with the DB
  """

  import Ecto.Query

  alias Ecto.Adapters.SQL
  alias Ecto.Queryable
  alias Wocky.Repo

  def get_count(queryable, field \\ :id) do
    queryable
    |> exclude(:preload)
    |> exclude(:select)
    |> exclude(:order_by)
    |> select([..., i], count(field(i, ^field)))
    |> Repo.one!()
  end

  # Get the raw SQL that will be generated by a query
  @spec get_sql(Queryable.t()) :: {String.t(), [any()]}
  def get_sql(query), do: SQL.to_sql(:all, Repo, query)

  # Helper function for sticking inline in query pipe chains to show raw SQL
  @spec dump_sql(Queryable.t()) :: Queryable.t()
  def dump_sql(query) do
    # credo:disable-for-next-line Credo.Check.Warning.IoInspect
    IO.inspect(get_sql(query))
    query
  end
end

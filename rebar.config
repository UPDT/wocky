%% -*- mode: erlang; erlang-indent-level: 2; indent-tabs-mode: nil -*-
%% ex: ts=2 sw=2 ft=erlang et

{require_min_otp_vsn, "17"}.

{erl_opts, [
  debug_info,
  warnings_as_errors,
  %% warn_export_all,
  warn_export_vars,
  warn_obsolete_guard,
  warn_unused_import,
  {warn_format, 1},
  {parse_transform, lager_transform}
]}.

{post_hooks, [
  {clean, "rm -f doc/*html doc/stylesheet.css doc/edoc-info doc/erlang.png"}
]}.

{alias, [
  {check, [eunit, ct]}
]}.

{edoc_opts, [{pretty_printer, erl_pp}]}.


%%% === Testing ===

%% The app_config settings below are not currently supported in the
%% official version of rebar3. We are using a patched version with this
%% feature, though hopefully the feature will be accepted into the official
%% version.

{cover_enabled, true}.
{cover_opts, [verbose]}.
{eunit_opts, [
  verbose, no_tty,
  {report, {eunit_progress, [colored]}},
  {app_config, "test/app.config"}
]}.
{ct_opts, [
  {logdir, "_build/test/ct_logs"},
  {app_config, "test/app.config"},
  {config, "test/test.config"}
]}.

%% Xref
{xref_warnings, true}.
{xref_checks, [
  undefined_function_calls, undefined_functions, locals_not_used,
  exports_not_used, deprecated_function_calls, deprecated_functions
]}.

%% Dialyzer
{dialyzer, [
  {warnings, [unmatched_returns, error_handling, underspecs]},
  {base_plt_apps, [
    compiler, crypto, erts, kernel, stdlib, mnesia, ssl, ssh, xmerl, public_key,
    tools, sasl, hipe, edoc, syntax_tools, runtime_tools, inets, webtool, asn1
  ]},
  {plt_apps, top_level_deps} % top_level_deps | all_deps
]}.

%% Elvis (lint)
{elvis, [
  #{dirs => ["src", "test"],
    filter => "*.erl",
    rules => [
      {elvis_style, line_length,
       #{ignore => [], limit => 80, skip_comments => false}},
      {elvis_style, no_tabs},
      {elvis_style, no_trailing_whitespace},
      {elvis_style, macro_names, #{ignore => []}},
      {elvis_style, macro_module_names},
      {elvis_style, operator_spaces,
       #{rules => [{right, ","}, {right, "++"}, {left, "++"}]}},
      {elvis_style, nesting_level, #{level => 3}},
      {elvis_style, god_modules, #{limit => 25, ignore => []}},
      {elvis_style, no_if_expression},
      {elvis_style, invalid_dynamic_call, #{ignore => []}},
      {elvis_style, used_ignored_variable},
      {elvis_style, no_behavior_info},
      {elvis_style, module_naming_convention,
       #{regex => "^[a-z]([a-z0-9]*_?)*(_SUITE)?$", ignore => []}},
      {elvis_style, function_naming_convention,
       #{regex => "^([a-z][a-z0-9]*_?)*$"}},
      {elvis_style, state_record_and_type},
      {elvis_style, no_spec_with_records},
      {elvis_style, dont_repeat_yourself, #{min_complexity => 15}},
      {elvis_style, no_debug_call, #{ignore => []}}
   ]},
  #{dirs => ["."],
    filter => "rebar.config",
    rules => [
      %% {elvis_project, protocol_for_deps_rebar, #{ignore => []}},
      %% {elvis_project, no_deps_master_rebar, #{ignore => []}}
   ]}
]}.


%%% === Shell/Auto ===
{shell, [
  {apps, [wocky]}, % only boot wocky; comment out to start ejabberd
  {config, "etc/dev.config"},
  {script_file, "priv/shell.escript"}
]}.


%%% === Release ===
{relx, [
  {release, {"wocky", semver}, [
     wocky, ejabberd, cqerl, ossp_uuid, fusco, p1_utils, cache_tab, pa,
     cuesport, base16, alarms, idna, recon, setup, runtime_tools, xmerl
  ]},

  {dev_mode, false},
  {include_erts, true},

  {generate_start_script, false},
  {extended_start_script, false},

  {sys_config, "etc/sys.config"},
  {vm_args, "etc/vm.args"},

  {overlay, [
    {mkdir, "log/sasl"},
    {copy, "bin", "."},
    {copy, "priv/ssl", "priv/ssl"},
    {copy, "etc/ejabberd.cfg", "priv/ejabberd.cfg"}
  ]}
]}.


%%% === Dependencies ===
{deps, [
  {pooler,        "1.5.0"},
  {lager,         "3.0.2"},
  {cqerl,         {github, "toland/cqerl",            {branch, "dev"}}},
  {ossp_uuid,     {github, "toland/erlang-ossp-uuid", {tag, "v1.0.1"}}},
  {ejabberd,      {rsync, "ext/MongooseIM/apps/ejabberd"}},

  %% ejabberd dependencies
  {redo,          "2.0.1"},
  {riakc,         "2.1.1"},
  {cowboy,        "1.0.4"},
  {folsom,        "0.8.3"},
  {idna,          "1.0.2"},
  {p1_utils,      "1.0.1"},
  {cache_tab,     "1.0.1"},
  {p1_stringprep, "1.0.0"},
  {base16,        {github, "goj/base16",              {ref, "b781a7"}}},
  {cuesport,      {github, "esl/cuesport",            {ref, "d82ff2"}}},
  {exml,          {github, "esl/exml",                {tag, "2.2.0"}}},
  {exometer_core, {github, "Feuerlabs/exometer_core", {tag, "1.4"}}},
  {exometer,      {github, "Feuerlabs/exometer",      {tag, "1.2.1"}}},
  {mochijson2,    {github, "bjnortier/mochijson2",    {ref, "e162b7"}}},
  {alarms,        {github, "toland/alarms",           {tag, "0.1.2"}}},
  {fusco,         {github, "esl/fusco",               {ref, "0a4284"}}},
  {pa,            {github, "lavrin/pa",               {tag, "0.2.0"}}},

  %% runtime dependencies (included in release, not needed to build)
  {recon,         "2.2.1"},

  %% build dependencies (not included in release)
  {edown,         "0.7.0"},

  %% testing dependencies (not included in release)
  {proper,        "1.1.1-beta"},
  {meck,          "0.8.3"},
  {escalus,       {github, "esl/escalus",             {tag, "2.6.3"}}}
]}.


%%% === Port/NIF Compiler ===
%% Make sure we can find openssl on Mac OS X (for ejabberd)
{port_env, [
  {"darwin", "CFLAGS",   "$CFLAGS -I/usr/local/opt/openssl/include/ -I/usr/local/include"},
  {"darwin", "CXXFLAGS", "$CXXFLAGS -I/usr/local/opt/openssl/include/ -I/usr/local/include"},
  {"darwin", "LDFLAGS",  "$LDFLAGS -L/usr/local/opt/openssl/lib -L/usr/local/lib"}
]}.


%%% === Overrides ===
{overrides, [
  %% Setup has a post_hook that attempts to generate an escript
  %% the hook fails and we don't need the escript so blank out the hook
  {override, setup, [
    {post_hooks, []}
  ]},

  %% Some dependencies use rebar 2 plugins causing a warning on every compile
  %% Since they don't work anyway, we can just zero-out the plugin list
  {override, riak_pb, [{plugins, []}]},
  {override, hamcrest, [{plugins, []}]},

  %% p1_stringprep, exml and ejabberd all have ports/nifs that require the
  %% port compiler. In rebar3 it is a plugin, so we need to hook it into the
  %% build pipeline
  {override, p1_stringprep, [
    {provider_hooks, [{pre, [{compile, {pc, compile}}, {clean, {pc, clean}}]}]}
  ]},

  {override, exml, [
    {provider_hooks, [{pre, [{compile, {pc, compile}}, {clean, {pc, clean}}]}]}
  ]},

  {override, lz4, [
    {provider_hooks, [{pre, [{compile, {pc, compile}}, {clean, {pc, clean}}]}]}
  ]},

  {override, snappy, [
    {provider_hooks, [{pre, [{compile, {pc, compile}}, {clean, {pc, clean}}]}]}
  ]},

  {override, re2, [
    {provider_hooks, [{post, [{compile, {pc, compile}}, {clean, {pc, clean}}]}]}
  ]},

  %% ejabberd also has two ASN.1 files that need to be compiled. This feature
  %% isn't in rebar3, but luckily it is easy to fake it.
  %% TODO: I should really build a simple ASN.1 plugin for rebar3.
  {override, ejabberd, [
    {pre_hooks, [
      {compile, "erlc -o ./src -I ./include +noobj ./asn1/*"},
      {compile, "sed -i.bak /\\`.*\\`/s//1.6.1/ src/ejabberd.app.src"}
    ]},
    {provider_hooks, [{pre, [{compile, {pc, compile}}, {clean, {pc, clean}}]}]}
  ]}
]}.


%%% === Rebar Plugins ===
{plugins, [
  pc,
  rebar3_run,
  rebar_alias,
  {rebar_tidy_deps, {git, "https://github.com/kellymclaughlin/rebar3-tidy-deps-plugin.git", {tag, "0.0.2"}}},
  {rebar_rsync_deps, {git, "https://github.com/toland/rebar-rsync-deps.git", {branch, "master"}}},
  {rebar3_lint, {git, "https://github.com/project-fifo/rebar3_lint.git", {tag, "0.1.2"}}}
]}.
